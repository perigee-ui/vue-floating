{
  "compilerOptions": {
    /* Посетите https://aka.ms/tsconfig для получения дополнительной информации об этом файле */

    /* Проекты */
    // "incremental": true,                              /* Сохранить файлы .tsbuildinfo для обеспечения инкрементной компиляции проектов. */
    // "composite": true,                                /* Включить ограничения, позволяющие использовать проект TypeScript с ссылками на проекты. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Указать путь к файлу инкрементной компиляции .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Отключить предпочтение исходных файлов вместо файлов деклараций при ссылке на составные проекты. */
    // "disableSolutionSearching": true,                 /* Исключить проект из проверки ссылок на несколько проектов при редактировании. */
    // "disableReferencedProjectLoad": true,             /* Уменьшить количество проектов, загружаемых автоматически TypeScript. */

    /* Язык и окружение */
    "target": "ESNext",                                  /* Установить версию языка JavaScript для генерируемого JavaScript и включить совместимые декларации библиотек. */
    // "lib": [],                                        /* Указать набор встроенных файлов деклараций библиотек, описывающих целевую среду выполнения. */
    // "jsx": "preserve",                                /* Указать, какой код JSX генерируется. */
    // "experimentalDecorators": true,                   /* Включить экспериментальную поддержку устаревших экспериментальных декораторов. */
    // "emitDecoratorMetadata": true,                    /* Генерировать метаданные типа для декорированных объявлений в исходных файлах. */
    // "jsxFactory": "",                                 /* Указать функцию фабрики JSX, используемую при целевом выводе React JSX, например, 'React.createElement' или 'h'. */
    // "jsxFragmentFactory": "",                         /* Указать ссылку на фрагмент JSX, используемую для фрагментов при целевом выводе React JSX, например, 'React.Fragment' или 'Fragment'. */
    // "jsxImportSource": "",                            /* Указать модульный спецификатор, используемый для импорта функций фабрики JSX при использовании 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Указать объект, вызываемый для 'createElement'. Это применяется только при целевом выводе 'react' JSX. */
    // "noLib": true,                                    /* Отключить включение любых файлов библиотек, включая lib.d.ts по умолчанию. */
    "useDefineForClassFields": true,                     /* Генерировать поля классов, соответствующие стандарту ECMAScript. */
    "moduleDetection": "force"                           /* Управлять методом, используемым для определения формата модуля JS файлов. */,

    /* Модули */
    "module": "ESNext"                                   /* Указать, какой модульный код генерируется. */,
    // "rootDir": "./",                                  /* Указать корневую папку в пределах ваших исходных файлов. */
    "moduleResolution": "bundler"                        /* Указать, как TypeScript ищет файл по заданному спецификатору модуля. */,
    // "baseUrl": "./",                                  /* Указать базовый каталог для разрешения нерелятивных имен модулей. */
    // "paths": {},                                      /* Указать набор записей, которые перенаправляют импорты на дополнительные места поиска. */
    // "rootDirs": [],                                   /* Разрешить несколько папок, чтобы они рассматривались как одна при разрешении модулей. */
    // "typeRoots": [],                                  /* Указать несколько папок, которые действуют как './node_modules/@types'. */
    // "types": [],                                      /* Указать имена пакетов типов, которые должны быть включены без ссылки в исходном файле. */
    // "allowUmdGlobalAccess": true,                     /* Разрешить доступ к глобальным переменным UMD из модулей. */
    // "moduleSuffixes": [],                             /* Список суффиксов имен файлов для поиска при разрешении модуля. */
    "allowImportingTsExtensions": true,                  /* Разрешить импорт с включением расширений файлов TypeScript. Требует установки '--moduleResolution bundler' и либо '--noEmit', либо '--emitDeclarationOnly'. */
    // "rewriteRelativeImportExtensions": true,          /* Переписать расширения файлов '.ts', '.tsx', '.mts' и '.cts' в относительных путях импорта на их эквиваленты JavaScript в выходных файлах. */
    // "resolvePackageJsonExports": true,                /* Использовать поле 'exports' в package.json при разрешении импорта пакетов. */
    // "resolvePackageJsonImports": true,                /* Использовать поле 'imports' в package.json при разрешении импорта. */
    // "customConditions": [],                           /* Условия, которые нужно установить в дополнение к условиям по умолчанию при разрешении импорта. */
    "noUncheckedSideEffectImports": true,                /* Проверять импорты с побочными эффектами. */
    "resolveJsonModule": true,                           /* Включить импорт файлов .json. */
    // "allowArbitraryExtensions": true,                 /* Включить импорт файлов с любым расширением, при условии наличия файла декларации. */
    // "noResolve": true,                                /* Запретить 'import', 'require' или '<reference>' расширять количество файлов, которые TypeScript должен добавить в проект. */

    /* Поддержка JavaScript */
    "allowJs": false,                                    /* Разрешить включение файлов JavaScript в вашу программу. Используйте опцию 'checkJS' для получения ошибок из этих файлов. */
    // "checkJs": true,                                  /* Включить отчет об ошибках в проверяемых типах файлов JavaScript. */
    // "maxNodeModuleJsDepth": 1,                        /* Указать максимальную глубину папок, используемую для проверки файлов JavaScript из 'node_modules'. Применимо только с 'allowJs'. */

    /* Генерация */
    "declaration": false,                                /* Генерировать файлы .d.ts из файлов TypeScript и JavaScript в вашем проекте. */
    // "declarationMap": false,                          /* Создавать карты исходных файлов для файлов d.ts. */
    // "emitDeclarationOnly": true,                      /* Выводить только файлы d.ts, а не файлы JavaScript. */
    // "sourceMap": false,                               /* Создавать файлы карт исходных файлов для генерируемых файлов JavaScript. */
    // "inlineSourceMap": true,                          /* Включить файлы карт исходных файлов в генерируемый JavaScript. */
    "noEmit": true,                                      /* Отключить генерацию файлов при компиляции. */
    // "outFile": "./",                                  /* Указать файл, который объединяет все выходные данные в один файл JavaScript. Если 'declaration' установлено в true, также указывает файл, который объединяет все выходные файлы .d.ts. */
    // "outDir": "./",                                   /* Указать выходную папку для всех генерируемых файлов. */
    // "removeComments": true,                           /* Отключить генерацию комментариев. */
    // "importHelpers": true,                            /* Разрешить импорт вспомогательных функций из tslib один раз на проект, вместо включения их в каждый файл. */
    // "downlevelIteration": true,                       /* Генерировать более совместимый, но многословный и менее производительный JavaScript для итерации. */
    // "sourceRoot": "",                                 /* Указать корневой путь для отладчиков для поиска исходного кода. */
    // "mapRoot": "",                                    /* Указать местоположение, где отладчик должен искать файлы карт вместо сгенерированных местоположений. */
    // "inlineSources": true,                            /* Включить исходный код в карты исходных файлов внутри генерируемого JavaScript. */
    // "emitBOM": true,                                  /* Генерировать метку порядка байтов UTF-8 (BOM) в начале выходных файлов. */
    // "newLine": "crlf",                                /* Установить символ новой строки для генерируемых файлов. */
    // "stripInternal": true,                            /* Отключить генерацию деклараций, содержащих '@internal' в их комментариях JSDoc. */
    // "noEmitHelpers": true,                            /* Отключить генерацию пользовательских вспомогательных функций, таких как '__extends' в скомпилированном выводе. */
    "noEmitOnError": true,                               /* Отключить генерацию файлов, если обнаружены ошибки проверки типов. */
    // "preserveConstEnums": true,                       /* Отключить удаление объявлений 'const enum' в сгенерированном коде. */
    // "declarationDir": "./",                           /* Указать выходной каталог для сгенерированных файлов деклараций. */

    /* Ограничения совместимости */
    "isolatedModules": true,                             /* Убедиться, что каждый файл может быть безопасно транспилирован без зависимости от других импортов. */
    "verbatimModuleSyntax": true,                        /* Не преобразовывать и не исключать какие-либо импорты или экспорты, не помеченные как только типы, гарантируя, что они записаны в формате выходного файла на основе настройки 'module'. */
    // "isolatedDeclarations": true,                     /* Требовать достаточной аннотации на экспортируемых элементах, чтобы другие инструменты могли легко генерировать файлы деклараций. */
    // "allowSyntheticDefaultImports": true,             /* Разрешить 'import x from y', когда модуль не имеет экспорта по умолчанию. */
    "esModuleInterop": false,                            /* Генерировать дополнительный JavaScript для облегчения поддержки импорта модулей CommonJS. Это включает 'allowSyntheticDefaultImports' для совместимости типов. */
    // "preserveSymlinks": true,                         /* Отключить разрешение символических ссылок на их реальный путь. Это соответствует тому же флагу в node. */
    "forceConsistentCasingInFileNames": true,            /* Убедиться, что регистр в импортируемых именах файлов правильный. */

    /* Проверка типов */
    "strict": true,                                      /* Включить все параметры строгой проверки типов. */
    // "noImplicitAny": true,                            /* Включить отчет об ошибках для выражений и объявлений с неявным типом 'any'. */
    // "strictNullChecks": true,                         /* При проверке типов учитывать 'null' и 'undefined'. */
    // "strictFunctionTypes": true,                      /* При присвоении функций проверять, чтобы параметры и возвращаемые значения были совместимы по подтипам. */
    // "strictBindCallApply": true,                      /* Проверять, чтобы аргументы для методов 'bind', 'call' и 'apply' соответствовали исходной функции. */
    // "strictPropertyInitialization": true,             /* Проверять, чтобы свойства класса, объявленные, но не установленные в конструкторе, были инициализированы. */
    "strictBuiltinIteratorReturn": true,                 /* Встроенные итераторы создаются с типом 'TReturn' равным 'undefined' вместо 'any'. */
    "noImplicitThis": true,                              /* Включить отчет об ошибках, когда 'this' имеет тип 'any'. */
    // "useUnknownInCatchVariables": true,               /* По умолчанию переменные в блоке catch имеют тип 'unknown' вместо 'any'. */
    // "alwaysStrict": true,                             /* Убедиться, что 'use strict' всегда генерируется. */
    "noUnusedLocals": true,                              /* Включить отчет об ошибках, когда локальные переменные не используются. */
    "noUnusedParameters": true,                          /* Включить отчет об ошибках, когда параметры функции не используются. */
    // "exactOptionalPropertyTypes": true,               /* Интерпретировать типы необязательных свойств так, как они написаны, вместо добавления 'undefined'. */
    // "noImplicitReturns": true,                        /* Включить отчет об ошибках для путей кода, которые явно не возвращают значение в функции. */
    "noFallthroughCasesInSwitch": true,                  /* Включить отчет об ошибках для случаев падения в switch. */
    "noUncheckedIndexedAccess": true,                    /* Добавить 'undefined' к типу при доступе с использованием индекса. */
    "noImplicitOverride": true,                          /* Убедиться, что переопределяемые члены в производных классах помечены модификатором override. */
    // "noPropertyAccessFromIndexSignature": true,       /* Принудительно использовать индексированные аксессоры для ключей, объявленных с использованием индексированного типа. */
    // "allowUnusedLabels": true,                        /* Отключить отчет об ошибках для неиспользуемых меток. */
    // "allowUnreachableCode": true,                     /* Отключить отчет об ошибках для недостижимого кода. */

    /* Полнота */
    // "skipDefaultLibCheck": true,                      /* Пропустить проверку типов файлов .d.ts, включенных в TypeScript. */
    "skipLibCheck": true                                 /* Пропустить проверку типов всех файлов .d.ts. */
  }
}
